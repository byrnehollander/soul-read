{"version":3,"sources":["App.js","index.js"],"names":["App","useState","Set","types","setTypes","maxCMC","colors","setColors","Button","variant","color","onClick","cards","map","c","i","cmc","card","cardTypesArray","length","has","hasType","cardColorsArray","add","hasColor","name","src","image","height","alt","renderMatches","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OA4DeA,MA5Bf,WAAiB,IAAD,EACYC,mBAAS,IAAIC,IAAI,CAAC,aAD9B,mBACPC,EADO,KACAC,EADA,OAEcH,mBAAS,IAFvB,mBAEPI,EAFO,aAGcJ,mBAAS,IAAIC,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,QAHzD,mBAGPI,EAHO,KAGCC,EAHD,KAiBd,OACE,gCACE,yCACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMP,EAAS,IAAIF,IAAI,CAAC,cAA7E,qBACA,cAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMP,EAAS,IAAIF,IAAI,CAAC,cAA7E,qBACA,cAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMJ,EAAU,IAAIL,IAAI,CAAC,IAAK,QAAnF,eAjBkB,SAACC,EAAOE,EAAQC,GACpC,OAAOM,EAAMC,KAAI,SAACC,EAAGC,GACnB,GAAID,EAAEE,KAAOX,GAlCH,SAACY,EAAMd,GACrB,IAAKc,EAAKd,MACR,OAAO,EAGT,IADA,IAAMe,EAAiBD,EAAKd,MACnBY,EAAI,EAAGA,GAAKG,EAAeC,OAAQJ,IAC1C,GAAIZ,EAAMiB,IAAIF,EAAeH,IAC3B,OAAO,EAGX,OAAO,EAwBoBM,CAAQP,EAAGX,IArBvB,SAACc,EAAMX,GACtB,IAAKW,EAAKX,OACR,OAAO,EAET,IAAMgB,EAAkBL,EAAKX,OAC7BA,EAAOiB,IAAI,KACX,IAAK,IAAIR,EAAI,EAAGA,GAAKO,EAAgBH,OAAQJ,IAC3C,GAAIT,EAAOc,IAAIE,EAAgBP,IAC7B,OAAO,EAGX,OAAO,EAUyCS,CAASV,EAAGR,GACtD,OACE,gCAAcQ,EAAEW,KACd,qBAAKC,IAAKZ,EAAEa,MAAOC,OAAQ,IAAKC,IAAKf,EAAEW,SAD/BV,MAcbe,CAAc3B,EAAOE,EAAQC,OClDpCyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.a550ad87.chunk.js","sourcesContent":["import { useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport './App.css'\nimport cards from './cards.json'\n\nconst hasType = (card, types) => {\n  if (!card.types) {\n    return false\n  }\n  const cardTypesArray = card.types\n  for (let i = 0; i <= cardTypesArray.length; i++) {\n    if (types.has(cardTypesArray[i])) {\n      return true\n    }\n  }\n  return false\n}\n\nconst hasColor = (card, colors) => {\n  if (!card.colors) {\n    return false\n  }\n  const cardColorsArray = card.colors\n  colors.add('C')\n  for (let i = 0; i <= cardColorsArray.length; i++) {\n    if (colors.has(cardColorsArray[i])) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction App () {\n  const [types, setTypes] = useState(new Set(['Instant']))\n  const [maxCMC, setMaxCMC] = useState(20)\n  const [colors, setColors] = useState(new Set(['C', 'R', 'G', 'B', 'U', 'W']))\n\n  const renderMatches = (types, maxCMC, colors) => {\n    return cards.map((c, i) => {\n      if (c.cmc <= maxCMC && hasType(c, types) && hasColor(c, colors)) {\n        return (\n          <div key={i}>{c.name}\n            <img src={c.image} height={300} alt={c.name} />\n          </div>\n        )\n      }\n    })\n  }\n\n  return (\n    <div>\n      <b>Instants</b>\n      <Button variant='contained' color='primary' onClick={() => setTypes(new Set(['Instant']))}>Instant</Button>\n      <Button variant='contained' color='primary' onClick={() => setTypes(new Set(['Sorcery']))}>Sorcery</Button>\n      <Button variant='contained' color='primary' onClick={() => setColors(new Set(['C', 'W']))}>W</Button>\n      {renderMatches(types, maxCMC, colors)}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}